{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","item","key","GifExpertApp","categorias","i","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,cAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAa9C,OAAS,0BACAC,SARY,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAGb,YACiG,2BAChGO,KAAO,OACbC,MAAUT,EACVU,SAdsB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,UASlB,MCdAG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGjC,OAAS,yBACDC,UAAY,QAChB,yBACIC,IAAQF,EACZG,IAAQJ,IAJH,IAKF,+BACGA,EADH,KALE,M,uBCLAK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GACd,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QAR1B,kBAcZY,GAdY,4CAAH,sDCKPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAsBtC,OAhBAC,qBAAU,WACNlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,OAGrBf,EAAQC,KACT,IAOIe,EDjB2BK,CAAapB,GAAjCW,EAJuB,EAI7BL,KAAcQ,EAJe,EAIfA,QAQtB,OAAS,oCAEL,gCACOd,EADP,KAFK,KAGuBc,EAAU,gBAAkB,iBAHnD,IAGsE,yBACvElB,UAAY,aAChB,4BAIIe,EAAOH,KAAI,SAAAa,GACP,OAAS,kBAAE,EAAF,eAAcC,IAAQD,EAAKX,IAASW,OALrD,KAF2E,OEhBtEE,EAAe,WAAM,MAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAQ9B,OAAS,oCAEL,8CAFK,IAGoB,kBACzB,EADyB,CACbA,cAAkBA,IAJzB,IAKF,6BALE,QAM4D,gCAE7D6C,EAAWhB,KAAI,SAACR,EAAUyB,GAEtB,OAAO,kBAAC,EAAD,CACPH,IAAQtB,EACRA,SAAaA,OAN4C,KAN5D,UCLb0B,IAASC,OAAQ,kBACb,EADa,MAEbC,SAASC,eAAe,U","file":"static/js/main.01aaafca.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('Hola Mundo');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); /// bloquea el envio del form el comportamiento por defecto\r\n        if (inputValue.trim().length > 2) {\r\n            setCategorias(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n    return ( <\r\n        form onSubmit = { handleSubmit } > { /* <h2>Add category</h2> */ } { /* <h1> { inputValue }</h1> */ } <\r\n        input type = \"text\"\r\n        value = { inputValue }\r\n        onChange = { handleInputChange }\r\n        /> < /\r\n        form >\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    // console.log(img);\r\n    //{id, title, url}\r\n    return ( <\r\n        div className = \"card\" >\r\n        <\r\n        img src = { url }\r\n        alt = { title }\r\n        /> <\r\n        p > { title } < /p> <\r\n        /div>\r\n    )\r\n}","export const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=upkwAML5itV7cxV4CHonhwNYK9YYMiJH`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url\r\n\r\n            }\r\n        })\r\n        //console.log(gifs);\r\n        // setImages(gifs);\r\n    return gifs;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [count, setCount] = useState(0);\r\n    // const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs(category);\r\n    // useEffect ( () => {\r\n    //     getGifs(category)\r\n    //             .then( imgs => setImages(imgs));\r\n    // },[ category]);\r\n\r\n\r\n    // getGifs();\r\n    return ( <\r\n        >\r\n        <\r\n        h3 > { category } < /h3>  { loading ? 'Cargando.....' : 'Datos cargados' } <\r\n        div className = \"card-grid\" >\r\n        <\r\n        ol >\r\n\r\n        {\r\n            images.map(item => {\r\n                return ( < GifGridItem key = { item.id } {...item }\r\n                    />\r\n                )\r\n            })\r\n        } <\r\n        /ol> <\r\n        /div>\r\n\r\n        <\r\n        />\r\n    )\r\n}\r\n\r\n{\r\n    /* <h2>{count}</h2>\r\n                    <button onClick= {() => setCount(count + 1)}>Test</button> */\r\n}\r\n\r\n{\r\n    /* {\r\n                            images.map( ({id, title}) => {\r\n                                //console.log(title);\r\n                                return (<li key = {id}> {title } </li>);\r\n                                //  <li key = {id}> {title } </li>\r\n                            }) img = {item}\r\n                        } */\r\n}","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n        getGifs(category);\r\n    }, []);\r\n    // setTimeout( ()=> {\r\n    //     setState({\r\n    //         data: [1,2,3,45,6],\r\n    //         loading: false\r\n    //     });\r\n    // },3000);\r\n    return state; // { data: [], loading: true}\r\n};","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categorias = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n    // const handleAdd = () => {\r\n    //     //categorias.push('demo'); no se debe hacer esto\r\n    //     // setCategorias([...categorias, 'demo']);\r\n    //     setCategorias(['demo',...categorias]);\r\n    // }\r\n    return ( <\r\n        >\r\n        <\r\n        h2 > GifExpertApp < /h2> <\r\n        AddCategory setCategorias = { setCategorias }\r\n        /> <\r\n        hr / > { /* <button onClick = { handleAdd}>Agregar</button> */ } <\r\n        ol > {\r\n            categorias.map((category, i) => {\r\n                // return <li key = {category}> {category} </li>\r\n                return <GifGrid\r\n                key = { category }\r\n                category = { category }\r\n                />\r\n            })\r\n        } <\r\n        /ol> {\r\n            /* {\r\n                            categorias\r\n                        } */\r\n        } <\r\n        />\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render( <\n    GifExpertApp / > ,\n    document.getElementById('root')\n);"],"sourceRoot":""}